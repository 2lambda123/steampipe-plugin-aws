package aws

import (
	"context"
	"encoding/json"
	"errors"
	"os"
	"time"

	filehelpers "github.com/turbot/go-kit/files"

	"github.com/turbot/steampipe-plugin-sdk/v5/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin/transform"
)

//// TABLE DEFINITION

func tableAwsCloudtrailTrailEventLogFile(_ context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "aws_cloudtrail_trail_event_log_file",
		Description: "CloudTrail events from the log files available in local or S3 bucket.",
		List: &plugin.ListConfig{
			Hydrate: listTrailEventFromLogFiles,
		},
		Columns: awsAccountColumns([]*plugin.Column{
			{
				Name:        "access_key_id",
				Description: "The AWS access key ID that was used to sign the request. If the request was made with temporary security credentials, this is the access key ID of the temporary credentials.",
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromField("UserIdentity.AccessKeyId"),
			},
			{
				Name:        "aws_region",
				Description: "The AWS region that the request was made to, such as us-east-2.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "error_code",
				Description: "The AWS service error if the request returns an error.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "error_message",
				Description: "If the request returns an error, the description of the error.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "event_category",
				Description: "Shows the event category that is used in LookupEvents calls.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "event_id",
				Description: "The ID of the event.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "event_name",
				Description: "The name of the event returned.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "event_source",
				Description: "The AWS service that the request was made to.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "event_time",
				Description: "The date and time the request was made, in coordinated universal time (UTC).",
				Type:        proto.ColumnType_TIMESTAMP,
			},
			{
				Name:        "event_type",
				Description: "Identifies the type of event that generated the event record.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "event_version",
				Description: "The version of the log event format.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "read_only",
				Description: "Information about whether the event is a write event or a read event.",
				Type:        proto.ColumnType_BOOL,
			},
			{
				Name:        "recipient_account_id",
				Description: "Represents the account ID that received this event.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "request_id",
				Description: "The value that identifies the request.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "shared_event_id",
				Description: "GUID generated by CloudTrail to uniquely identify CloudTrail events from the same AWS action that is sent to different AWS accounts.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "source_ip_address",
				Description: "The IP address that the request was made from.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "user_agent",
				Description: "The agent through which the request was made, such as the AWS Management Console, an AWS service, the AWS SDKs or the AWS CLI.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "user_type",
				Description: "The name of the event returned.",
				Type:        proto.ColumnType_STRING,

				Transform: transform.FromField("UserIdentity.Type"),
			},
			{
				Name:        "username",
				Description: "The user name of the user that made the api request.",
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromField("UserIdentity.Username"),
			},
			{
				Name:        "user_identifier",
				Description: "The name/arn of user/role that made the api call.",
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromField("UserIdentity.Arn", "UserIdentity.SessionContext.sessionIssuer.arn", "UserIdentity.SessionContext.sessionIssuer.principalId"),
			},
			{
				Name:        "vpc_endpoint_id",
				Description: "Identifies the VPC endpoint in which requests were made from a VPC to another AWS service, such as Amazon S3.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "additional_event_data",
				Description: "Additional data about the event that was not part of the request or response.",
				Type:        proto.ColumnType_JSON,
			},
			{
				Name:        "request_parameters",
				Description: "The parameters, if any, that were sent with the request.",
				Type:        proto.ColumnType_JSON,
			},
			{
				Name:        "response_elements",
				Description: "The response element for actions that make changes (create, update, or delete actions).",
				Type:        proto.ColumnType_JSON,
			},
			{
				Name:        "resources",
				Description: "A list of resources referenced by the event returned.",
				Type:        proto.ColumnType_JSON,
			},
			{
				Name:        "tls_details",
				Description: "Shows information about the Transport Layer Security (TLS) version, cipher suites, and the FQDN of the client-provided host name of a service API call.",
				Type:        proto.ColumnType_JSON,
			},
			{
				Name:        "user_identity",
				Description: "Information about the user that made the request.",
				Type:        proto.ColumnType_JSON,
			},
		}),
	}
}

// https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference.html
// https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-record-contents.html
// https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/logging_cw_api_calls_cwe.html#cwe_info_in_ct
type cloudtrailEventLog struct {
	AccountId *string `json:"accountId" type:"string"`

	// The AWS access key ID that was used to sign the request. If the request was made with temporary security credentials, this is the access key ID of the temporary credentials.
	AccessKeyId *string `json:"accessKeyId" type:"string"`

	// // A JSON string that contains a representation of the event returned.
	// CloudTrailEvent *string `json:"message" type:"string"`

	// The CloudTrail ID of the event returned.
	// A list of resources referenced by the event returned.
	Resources []*interface{} `json:"resources" type:"list"`

	// A user name or role name of the requester that called the API in the event
	// returned.
	Username *string `json:"userName" type:"string"`
	// contains filtered or unexported fields

	// Additional data about the event that was not part of the request or response.
	AdditionalEventData *interface{} `json:"additionalEventData" type:"map"`

	// Identifies the API version associated with the AwsApiCall eventType value.
	ApiVersion *string `json:"apiVersion"`

	// The AWS region that the request was made to, such as us-east-2.
	AwsRegion *string `json:"awsRegion" type:"string"`

	// Shows the event category that is used in LookupEvents calls.
	EventCategory *string `json:"eventCategory" type:"string"`

	// GUID generated by CloudTrail to uniquely identify each event.
	EventId *string `json:"eventID" type:"string"`

	// The name of the event returned.
	EventName *string `json:"eventName" type:"string"`

	// The AWS service that the request was made to.
	EventSource *string `json:"eventSource" type:"string"`

	// The date and time the request was made, in coordinated universal time (UTC).
	EventTime time.Time `json:"eventTime"`

	// Identifies the type of event that generated the event record.
	EventType *string `json:"eventType" type:"string"`

	// The version of the log event format. The current version is 1.08.
	EventVersion *string `json:"eventVersion" type:"string"`

	// The AWS service error if the request returns an error.
	ErrorCode *string `json:"errorCode"`

	// If the request returns an error, the description of the error.
	ErrorMessage *string `json:"errorMessage"`

	// A Boolean value that identifies whether the event is a management event.
	ManagementEvent *bool `json:"managementEvent" type:"bool"`

	// Represents the account ID that received this event.
	RecipientAccountId *string `json:"recipientAccountId" type:"string"`

	// The response element for actions that make changes (create, update, or delete actions).
	ResponseElements *interface{} `json:"responseElements" type:"map"`

	// GUID generated by CloudTrail to uniquely identify CloudTrail
	// events from the same AWS action that is sent to different AWS accounts.
	SharedEventId *string `json:"sharedEventID" type:"string"`

	// The IP address that the request was made from.
	SourceIpAddress *string `json:"sourceIPAddress" type:"string"`

	// Identifies whether this operation is a read-only operation.
	ReadOnly *bool `json:"readOnly" type:"bool"`

	// The value that identifies the request.
	RequestId *string `json:"requestID" type:"string"`

	// The parameters, if any, that were sent with the request.
	RequestParameters *interface{} `json:"requestParameters" type:"map"`

	// The agent through which the request was made,
	// such as the AWS Management Console, an AWS service,
	// the AWS SDKs or the AWS CLI.
	UserAgent *string `json:"userAgent" type:"string"`

	// Information about the user that made a request. For
	// UserIdentity *interface{} `json:"userIdentity" type:"map"`
	UserIdentity userIdentity `json:"userIdentity"`

	// Identifies the VPC endpoint in which requests were
	// made from a VPC to another AWS service, such as Amazon S3.
	VpcEndpointId *string `json:"vpcEndpointId" type:"string"`

	// Identifies the service event, including what triggered the event and the result.
	ServiceEventDetails *interface{} `json:"serviceEventDetails"`

	// If an event delivery was delayed, or additional information
	// about an existing event becomes available after the event is
	// logged, an addendum field shows information about why the event was delayed.
	Addendum *interface{} `json:"addendum"`

	// Shows information about edge devices that are targets of a request. Currently, S3 Outposts device events include this field.
	EdgeDeviceDetails *interface{} `json:"edgeDeviceDetails"`

	// Shows whether or not an event originated from a AWS Management Console session.
	SessionCredentialFromConsole *interface{} `json:"sessionCredentialFromConsole"`

	// Shows information about the Transport Layer Security (TLS) version, cipher suites, and the FQDN of the client-provided host name of a service API call.
	TlsDetails *interface{} `json:"tlsDetails"`
}

type records struct {
	Records []cloudtrailEventLog
}

func listTrailEventFromLogFiles(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	records, err := getCloudtrailEventLogFileContent(ctx, d)
	if err != nil {
		plugin.Logger(ctx).Error("listTrailEventFromLogFiles", "getCloudtrailEventLogFileContent", err)
		return nil, err
	}

	for _, record := range records {
		for _, content := range record.Records {
			d.StreamListItem(ctx, content)

			// Context can be cancelled due to manual cancellation or the limit has been hit
			if d.RowsRemaining(ctx) == 0 {
				return nil, nil
			}
		}
	}

	return nil, nil
}

// Get the log contents of the given files.
func getCloudtrailEventLogFileContent(ctx context.Context, d *plugin.QueryData) ([]records, error) {
	conn, err := cloudtrailEventLogFileContentCached(ctx, d, nil)
	if err != nil {
		return nil, err
	}
	return conn.([]records), nil
}

// Cached form of the log file content.
var cloudtrailEventLogFileContentCached = plugin.HydrateFunc(cloudtrailEventLogFileContentUncached).Memoize()

func cloudtrailEventLogFileContentUncached(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (any, error) {

	// Read the config
	resolvedPaths, err := resolveLogFilePaths(ctx, d)
	if err != nil {
		return nil, err
	}

	recordLogs := []records{}
	for _, path := range resolvedPaths {
		rec := records{}
		// Load the file into a buffer
		plugin.Logger(ctx).Error("path", path)
		content, err := os.ReadFile(path)
		if err != nil {
			plugin.Logger(ctx).Error("cloudtrailEventLogFileContentUncached", "failed to read file", err, "path", path)
			return nil, err
		}

		err = json.Unmarshal(content, &rec)
		if err != nil {
			return nil, err
		}
		recordLogs = append(recordLogs, rec)
	}

	return recordLogs, nil
}

func resolveLogFilePaths(ctx context.Context, d *plugin.QueryData) ([]string, error) {
	config := GetConfig(d.Connection)

	if config.CloudtrailEventLogPaths == nil {
		return nil, errors.New("cloudtrail_event_log_paths must be set in the config")
	}

	// Gather file path matches for the glob
	var matches, resolvedPaths []string
	paths := config.CloudtrailEventLogPaths
	for _, i := range paths {

		// List the files in the given source directory
		files, err := d.GetSourceFiles(i)
		if err != nil {
			return nil, err
		}
		matches = append(matches, files...)
	}

	// Sanitize the matches to ignore the directories
	for _, i := range matches {

		// Ignore directories
		if filehelpers.DirectoryExists(i) {
			continue
		}
		resolvedPaths = append(resolvedPaths, i)
	}

	return resolvedPaths, nil
}
